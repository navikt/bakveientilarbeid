name: Bygg og publiser docker-image for main

on:
  push:
    branches:
      - master
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:

      - name: Sjekk ut koden
        uses: actions/checkout@v2

      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: 1.13

      - name: Finn cache-variabler
        uses: navikt/pb-common-gh-actions/cache-prep@v2

      - name: Sett opp cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}${{ env.CACHE_KEY_NAMESPACE }}${{ hashFiles(env.CACHE_KEY_HASHED_PATH) }}

      - name: Bygg prosjekt og kjÃ¸r tester
        uses: navikt/pb-common-gh-actions/build@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bygg, tag og push Docker image
        uses: navikt/pb-common-gh-actions/docker-publish@v2
        with:
          TAG_LATEST: "true"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-dev:
    name: Deploy to dev
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v1

      - name: Lag tag for image
        run: echo "TAG=$(git log -1 --pretty='%ad_%h' --date=format:'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Lag full image referanse
        run: echo "IMAGE=$IMAGE_BASE:$TAG" >> $GITHUB_ENV

      - name: Deploy to Dev
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          DRY_RUN: false
          RESOURCE: nais/nais-dev-gcp/nais.yaml





#      - name: Sjekk om deploy til gcp i dev er mulig
#        run: echo "DEV_GCP_PERSONBRUKER_CONFIG_DEFINED=$([[ -f ./nais/dev-gcp/nais.yaml ]] && echo 'true' || echo 'false')" >> $GITHUB_ENV
#
#      - name: 'Deploy-er til personbruker i dev-gcp'
#        if: env.DEV_GCP_PERSONBRUKER_CONFIG_DEFINED == 'true'
#        uses: 'nais/deploy/actions/deploy@v1'
#        env:
#          REF: ${{ github.sha }}
#          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
#          CLUSTER: dev-gcp
#          RESOURCE: ./nais/dev-gcp/nais.yaml
#          VAR: version=${{ env.IMAGE }}
#          PRINT_PAYLOAD: true

  deploy-prod:
    name: Deploy to prod-gcp
    needs: deploy-dev
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v1

      - name: Lag tag for image
        run: echo "TAG=$(git log -1 --pretty='%ad_%h' --date=format:'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Lag full image referanse
        run: echo "IMAGE=$IMAGE_BASE:$TAG" >> $GITHUB_ENV

      - name: Deploy to production
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-fss
          DRY_RUN: false
          RESOURCE: nais/nais-prod-fss.yaml


#      - name: Sjekk om prodsetting i gcp er mulig
#          run: echo "PROD_GCP_VARS_TEMPLATE_DEFINED=$([[ -f ./nais/prod-gcp/nais.yaml ]] && echo 'true' || echo 'false')" >> $GITHUB_ENV
#
#            - name: 'Deploy-er til personbruker i prod-gcp'
#              if: env.PROD_GCP_VARS_TEMPLATE_DEFINED == 'true'
#              uses: 'nais/deploy/actions/deploy@v1'
#              env:
#                REF: ${{ github.sha }}
#                APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
#                CLUSTER: prod-gcp
#                RESOURCE: ./nais/prod-gcp/nais.yaml
#                VAR: version=${{ env.IMAGE }}
#                PRINT_PAYLOAD: true

  release:
    name: Tag and release
    needs: deploy-prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        name: Checkout

      - name: Lag tag for release
        run: echo "TAG=$(git log -1 --pretty='%ad' --date=format:'%Y%m%d%H%M%S')-$(git log -1 --pretty='%h')" >> $GITHUB_ENV

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release/prod@${{ env.TAG }}
          release_name: Release to prod
          prerelease: false